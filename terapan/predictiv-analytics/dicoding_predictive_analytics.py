# -*- coding: utf-8 -*-
"""dicoding_predictive-analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1gGbqDL0gQB3mVCzUi_-1XudnZ6YAKCS7

# Proyek Pertama : Predictive Analytics
- **Nama:** Allan Bil Faqih
- **ID Dicoding:** allanbil214

Sauce: https://www.kaggle.com/datasets/joebeachcapital/seoul-bike-sharing/data



Data Description:
Dataset ini berisi informasi cuaca (Suhu, Kelembaban, Kecepatan Angin, Jarak Pandang, Titik Embun, Radiasi Matahari, Curah Salju, Curah Hujan), jumlah sepeda yang disewa per jam, dan informasi tanggal.

Attribute Information:

    Date : year-month-day
    Rented Bike Count - Jumlah sepeda yang disewa setiap jamnya
    Hour - Jam dalam sehari
    Temperature - Suhu dalam Celcius
    Humidity - %
    Windspeed - m/s
    Visibility - 10m
    Dew point temperature - Celsius
    Solar radiation - MJ/m2
    Rainfall - mm
    Snowfall - cm
    Seasons - Winter, Spring, Summer, Autumn
    Holiday - Holiday/No holiday
    Functional Day - NoFunc(Jam Non Fungsional), Fun(Jam fungsional)

## Import Semua Packages/Library yang Digunakan
"""

# Importing necessary libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, r2_score

"""# 1. Data Loading"""

# Load data csv dari github
df = pd.read_csv("https://raw.githubusercontent.com/allanbil214/dicoding_terapan-ops/main/terapan/predictiv-analytics/dataset/SeoulBikeData.csv", encoding='unicode_escape')
ori_df = df

# Menampilkan beberapa Row pertama
df.head()

# Menampilkan semua kolom
print(df.columns)

"""# 2. Data Preprocessing"""

# Menampilkan semua tipe data kolom
df.info()

# Mengecek missing values
print(df.isnull().sum())

# Mengkonversi dan mengekstrak tanggal
df['Date'] = pd.to_datetime(df['Date'], dayfirst=True)
df['Year'] = df['Date'].dt.year
df['Month'] = df['Date'].dt.month
df['Day'] = df['Date'].dt.day

# Membuang kolom Date, karena sudah diekstrak
df.drop(columns="Date", axis =1,inplace =True)

# Mengencode ketigal kolom tersebut
df = pd.get_dummies(df, columns=['Seasons', 'Holiday', 'Functioning Day'], drop_first=False)

df.head()

print(df.columns)

df.info()

"""# 3. Melakukan EDA"""

# Basic statistics
print(df.describe())

# Distribusi Rental Sepeda
plt.figure(figsize=(10, 5))
sns.histplot(df['Rented Bike Count'], bins=30, kde=True)
plt.title('Distribution of Rented Bike Count')
plt.xlabel('Rented Bike Count')
plt.ylabel('Frequency')
plt.show()

# Korelasi heatmap
plt.figure(figsize=(12,8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.show()

# Pairplot untuk memvisualkan hubungan antar fitur
sns.pairplot(df, vars=['Rented Bike Count', 'Temperature(째C)', 'Humidity(%)', 'Wind speed (m/s)'])
plt.suptitle('Pairplot of Selected Features', y=1.02)
plt.show()

# Boxplot untuk setiap musim
plt.figure(figsize=(10, 5))
sns.boxplot(x='Seasons_Spring', y='Rented Bike Count', data=df)
plt.title('Bike Rentals by Season (Spring)')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Seasons_Summer', y='Rented Bike Count', data=df)
plt.title('Bike Rentals by Season (Summer)')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Seasons_Autumn', y='Rented Bike Count', data=df)
plt.title('Bike Rentals by Season (Autumn)')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Seasons_Winter', y='Rented Bike Count', data=df)
plt.title('Bike Rentals by Season (Winter)')
plt.show()

plt.figure(figsize=(10, 5))
sns.boxplot(x='Holiday_No Holiday', y='Rented Bike Count', data=df)
plt.title('Bike Rentals on Holidays vs. Non-Holidays')
plt.show()

# Plot rental vs temperatur
plt.figure(figsize=(10, 5))
sns.scatterplot(x='Temperature(째C)', y='Rented Bike Count', data=df)
plt.title('Bike Rentals vs Temperature')
plt.show()

# Menganalisa tren rental
monthly_rentals = df.groupby(['Year', 'Month'])['Rented Bike Count'].mean().reset_index()
plt.figure(figsize=(12, 6))
sns.lineplot(data=monthly_rentals, x='Month', y='Rented Bike Count', hue='Year', marker='o')
plt.title('Monthly Average Bike Rentals Over Years')
plt.xlabel('Month')
plt.ylabel('Average Rented Bike Count')
plt.xticks(ticks=np.arange(1, 13), labels=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'])
plt.show()

"""# 4. Menentukan Fitur dan Target"""

# Memilih fitur untuk prediksi
features = ['Hour', 'Temperature(째C)', 'Humidity(%)', 'Wind speed (m/s)', 'Visibility (10m)', 'Dew point temperature(째C)',
            'Solar Radiation (MJ/m2)', 'Rainfall(mm)', 'Snowfall (cm)', 'Seasons_Spring', 'Seasons_Summer',
            'Seasons_Autumn', 'Holiday_No Holiday', 'Functioning Day_Yes']

# Variabel target
target = 'Rented Bike Count'

"""# 5. Memisah Data menjadi Train dan Test"""

X = df[features]
y = df[target]

# Memisah 8:2 Train dan Test, dengan random_state 42
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

"""# 6. Standarisasi fitur"""

# Menstandarisasi fitur
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

"""# 7. Membuat model dengan Random Forest"""

# 7. Modeling dengan Random Forest
model = RandomForestRegressor(n_estimators=100, random_state=42)
model.fit(X_train_scaled, y_train)

"""# 8. Melakukan Prediksi"""

# 8. Membuat prediksi
y_pred = model.predict(X_test_scaled)

"""# 9. Melakukan Evaluasi"""

# 9. Mengevaluasi Model
mae = mean_absolute_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error: {mae}")
print(f"R2 Score: {r2}")

# Memvisualkan nilai prediksi vs asli
plt.figure(figsize=(10,5))
plt.plot(y_test.values, label='Actual')
plt.plot(y_pred, label='Predicted')
plt.legend()
plt.title('Actual vs Predicted Bike Rentals')
plt.show()